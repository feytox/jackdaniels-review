class Eval {
    static String s_error_unclosed_bracket;
    static String s_error_unopened_bracket;
    static String s_error_missing_op;
    static String s_error_only_op_present;
    static String s_error_too_long_number;
    static Result internalSuccess;

    static char CHAR_ADD;
    static char CHAR_SUB;
    static char CHAR_MUL;
    static char CHAR_DIV;
    static char CHAR_EQ;
    static char CHAR_GT;
    static char CHAR_LT;
    static char CHAR_MIN;
    static char CHAR_MAX;
    static char CHAR_LEFT_PAR;
    static char CHAR_RIGHT_PAR;

    static int PURP_OP;
    static int PURP_LEFT_PAR;
    static int PURP_RIGHT_PAR;
    static int PURP_DIGIT;

    static Array charToPriority;
    static Array charToPurpose;

    static Stack ops, vals;
    static char c;
    static int i, purpose;
    static Result internalResult;
    static String numberBuilder, result;
    static boolean loop;

    static char op;
    static int secondVal, firstVal;

    function void init() {
        let s_error_unclosed_bracket = "Unclosed opening bracket";
        let s_error_unopened_bracket = "Unopened closing bracket";
        let s_error_missing_op = "Missing operand";
        let s_error_only_op_present = "Theres just some op or nothing";
        let s_error_too_long_number = "Too long number";
        let internalSuccess = Result.ok(""); // no need to ever dispose

        let CHAR_ADD = 43;       // +
        let CHAR_SUB = 45;       // -
        let CHAR_MUL = 42;       // *
        let CHAR_DIV = 47;       // /
        let CHAR_EQ = 61;        // =
        let CHAR_GT = 62;        // >
        let CHAR_LT = 60;        // <
        let CHAR_MIN = 109;      // m
        let CHAR_MAX = 77;       // M
        let CHAR_LEFT_PAR = 40;  // (
        let CHAR_RIGHT_PAR = 41; // )

        let PURP_OP = 1;
        let PURP_LEFT_PAR = 2;
        let PURP_RIGHT_PAR = 3;
        let PURP_DIGIT = 4;

        let charToPriority = Array.new(128);
        let charToPriority[CHAR_ADD] = 100;
        let charToPriority[CHAR_SUB] = 100;
        let charToPriority[CHAR_MUL] = 200;
        let charToPriority[CHAR_DIV] = 200;
        let charToPriority[CHAR_EQ] = 20;
        let charToPriority[CHAR_GT] = 20;
        let charToPriority[CHAR_LT] = 20;
        let charToPriority[CHAR_MIN] = 50;
        let charToPriority[CHAR_MAX] = 50;
        let charToPriority[CHAR_LEFT_PAR] = 0;
        let charToPriority[CHAR_RIGHT_PAR] = 32767;

        let charToPurpose = Array.new(128);
        let charToPurpose[CHAR_ADD] = PURP_OP;
        let charToPurpose[CHAR_SUB] = PURP_OP;
        let charToPurpose[CHAR_MUL] = PURP_OP;
        let charToPurpose[CHAR_DIV] = PURP_OP;
        let charToPurpose[CHAR_EQ] = PURP_OP;
        let charToPurpose[CHAR_GT] = PURP_OP;
        let charToPurpose[CHAR_LT] = PURP_OP;
        let charToPurpose[CHAR_MIN] = PURP_OP;
        let charToPurpose[CHAR_MAX] = PURP_OP;

        let charToPurpose[CHAR_LEFT_PAR] = PURP_LEFT_PAR;
        let charToPurpose[CHAR_RIGHT_PAR] = PURP_RIGHT_PAR;

        let charToPurpose[48] = PURP_DIGIT;
        let charToPurpose[49] = PURP_DIGIT;
        let charToPurpose[50] = PURP_DIGIT;
        let charToPurpose[51] = PURP_DIGIT;
        let charToPurpose[52] = PURP_DIGIT;
        let charToPurpose[53] = PURP_DIGIT;
        let charToPurpose[54] = PURP_DIGIT;
        let charToPurpose[55] = PURP_DIGIT;
        let charToPurpose[56] = PURP_DIGIT;
        let charToPurpose[57] = PURP_DIGIT;

        let ops = Stack.new(100);
        let vals = Stack.new(100);
        let numberBuilder = String.new(5);
        let result = String.new(6);

        return;
    }

    function String eval(String s) {
        do ops.clear();
        do vals.clear();
        while (numberBuilder.length() > 0) {
            do numberBuilder.eraseLastChar();
        }
        while (result.length() > 0) {
            do result.eraseLastChar();
        }

        let i = 0;
        while (i < s.length()) {
            let c = s.charAt(i);
            let purpose = charToPurpose[c];

            if (purpose = PURP_DIGIT) {
                if (numberBuilder.length() = 5) {
                    return Result.error(s_error_too_long_number);
                }
                do numberBuilder.appendChar(c);
            }
            else {
                do Eval.internalBuildNumber();
            }

            if (purpose = PURP_LEFT_PAR) {
                do ops.push(CHAR_LEFT_PAR);
            }

            if (purpose = PURP_RIGHT_PAR) {
                let loop = true;
                while(loop) {
                    if (ops.isEmpty()) {
                        return Result.error(s_error_unopened_bracket);
                    }
                    else {
                        if (charToPurpose[ops.top()] = PURP_LEFT_PAR) {
                            let loop = false;
                        }
                        else {
                            let internalResult = Eval.internalEval();
                            if (internalResult.isError()) {
                                return internalResult;
                            }
                        }
                    }
                }

                do ops.pop();
            }

            if (purpose = PURP_OP) {
                let loop = true;
                while(loop) {
                    if (ops.isEmpty()) {
                        let loop = false;
                    }
                    else {
                        if (charToPriority[ops.top()] < charToPriority[c]) {
                            let loop = false;
                        }
                        else {
                            let internalResult = Eval.internalEval();
                            if (internalResult.isError()) {
                                return internalResult;
                            }
                        }
                    }
                }

                do ops.push(c);
            }

            let i = i + 1;
        }

        do Eval.internalBuildNumber();

        while (ops.size() > 0) {
            let internalResult = Eval.internalEval();
            if (internalResult.isError()) {
                return internalResult;
            }
        }

        if (~(vals.isEmpty())) {
            do result.setInt(vals.pop());
        }
        else {
            do result.setInt(0);
        }
        
        return Result.ok(result);
    }

    function Result internalEval() {
        // op is always present
        let op = ops.pop();
        if (~(charToPurpose[op] = PURP_OP)) {
            return Result.error(s_error_unclosed_bracket);
        }
        if (vals.size() = 1) {
            return Result.error(s_error_missing_op);
        }
        if (vals.size() = 0) {
            return Result.error(s_error_only_op_present);
        }
        let secondVal = vals.pop();
        let firstVal = vals.pop();
        do vals.push(Eval.internalApplyOp(firstVal, secondVal, op));
        return internalSuccess;
    }

    function int internalApplyOp(int a, int b, char op) {
        if (op = CHAR_ADD) {
            return a + b;
        }
        if (op = CHAR_SUB) {
            return a - b;
        }
        if (op = CHAR_MUL) {
            return a * b;
        }
        if (op = CHAR_DIV) {
            return a / b;
        }
        if (op = CHAR_EQ) {
            if (a = b) {
                return 1;
            }
            else {
                return 0;
            }
        }
        if (op = CHAR_GT) {
            if (a > b) {
                return 1;
            }
            else {
                return 0;
            }
        }
        if (op = CHAR_LT) {
            if (a < b) {
                return 1;
            }
            else {
                return 0;
            }
        }
        if (op = CHAR_MIN) {
            if (a < b) {
                return a;
            }
            else {
                return b;
            }
        }
        if (op = CHAR_MAX) {
            if (a > b) {
                return a;
            }
            else {
                return b;
            }
        }
        do Sys.error(2300);
        return 0;
    }

    function void internalBuildNumber() {
        if (numberBuilder.length() > 0) {
            do vals.push(numberBuilder.intValue());
            while (numberBuilder.length() > 0) {
                do numberBuilder.eraseLastChar();
            }
        }
        return;
    }
}