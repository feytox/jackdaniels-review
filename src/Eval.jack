class Eval {
    field Stack ops;
    field Stack vals;
    field String numberBuilder;
    field int result;
    field String error;


    static char CHAR_ADD;
    static char CHAR_SUB;
    static char CHAR_MUL;
    static char CHAR_DIV;
    static char CHAR_LEFT_PAR;
    static char CHAR_RIGHT_PAR;

    static int PURP_OP;
    static int PURP_LEFT_PAR;
    static int PURP_RIGHT_PAR;
    static int PURP_DIGIT;

    static Array charToPriority;
    static Array charToPurpose;

    function void init() {
        let CHAR_ADD = 43;
        let CHAR_SUB = 45;
        let CHAR_MUL = 42;
        let CHAR_DIV = 47;
        let CHAR_LEFT_PAR = 40;
        let CHAR_RIGHT_PAR = 41;

        let PURP_OP = 1;
        let PURP_LEFT_PAR = 2;
        let PURP_RIGHT_PAR = 3;
        let PURP_DIGIT = 4;

        let charToPriority = Array.new(128);
        let charToPriority[CHAR_ADD] = 100;
        let charToPriority[CHAR_SUB] = 100;
        let charToPriority[CHAR_MUL] = 200;
        let charToPriority[CHAR_DIV] = 200;
        let charToPriority[CHAR_LEFT_PAR] = 0;
        let charToPriority[CHAR_RIGHT_PAR] = 32767;

        let charToPurpose = Array.new(128);

        let charToPurpose[CHAR_ADD] = PURP_OP;
        let charToPurpose[CHAR_SUB] = PURP_OP;
        let charToPurpose[CHAR_MUL] = PURP_OP;
        let charToPurpose[CHAR_DIV] = PURP_OP;

        let charToPurpose[CHAR_LEFT_PAR] = PURP_LEFT_PAR;
        let charToPurpose[CHAR_RIGHT_PAR] = PURP_RIGHT_PAR;

        let charToPurpose[48] = PURP_DIGIT;
        let charToPurpose[49] = PURP_DIGIT;
        let charToPurpose[50] = PURP_DIGIT;
        let charToPurpose[51] = PURP_DIGIT;
        let charToPurpose[52] = PURP_DIGIT;
        let charToPurpose[53] = PURP_DIGIT;
        let charToPurpose[54] = PURP_DIGIT;
        let charToPurpose[55] = PURP_DIGIT;
        let charToPurpose[56] = PURP_DIGIT;
        let charToPurpose[57] = PURP_DIGIT;

        return;
    }

    function String eval(String s) {
        var Stack ops, vals;
        var char c;
        var int i, purpose;
        var Result internalResult;
        var String numberBuilder, result;

        let ops = Stack.new(100);
        let vals = Stack.new(100);
        let numberBuilder = String.new(5);
        let result = String.new(6);

        let i = 0;
        while (i < s.length()) {
            let c = s.charAt(i);
            let purpose = charToPurpose[c];

            if (purpose = PURP_DIGIT) {
                do Eval.internalHandleDigit(numberBuilder, c);
            }
            else {
                do Eval.internalBuildNumber(vals, numberBuilder);
            }

            if (purpose = PURP_LEFT_PAR) {
                do Eval.internalHandleLeftPar(ops, c);
            }
            if (purpose = PURP_RIGHT_PAR) {
                let internalResult = Eval.internalHandleRightPar(ops, vals);
                if (internalResult.isError()) {
                    return internalResult.getResult();
                }
            }
            if (purpose = PURP_OP) {
                let internalResult = Eval.internalHandleOp(ops, vals, c);
                if (internalResult.isError()) {
                    return internalResult.getResult();
                }
            }

            let i = i + 1;
        }

        do Eval.internalBuildNumber(vals, numberBuilder);

        while (~(ops.isEmpty())) {
            let internalResult = Eval.internalEval(ops, vals);
            if (internalResult.isError()) {
                return internalResult.getResult();
            }
        }

        if (~(vals.isEmpty())) {
            do result.setInt(vals.pop());
        }
        else {
            do result.setInt(0);
        }

        // free memory cuz it is important as fuck
        do vals.dispose();
        do ops.dispose();
        do numberBuilder.dispose();

        return result;
    }

    function Result internalEval(Stack ops, Stack vals) {
        var char op;
        var int secondVal, firstVal;
        var Result result;
        // op is always present
        let op = ops.pop();
        if (~(charToPurpose[op] = PURP_OP)) {
            return Result.new("Unclosed opening bracket", false);
        }
        if (vals.size() = 1) {
            return Result.new("Missing operand", false);
        }
        if (vals.size() = 0) {
            return Result.new("Theres just some op", false);
        }
        let secondVal = vals.pop();
        let firstVal = vals.pop();
        do vals.push(Eval.internalApplyOp(firstVal, secondVal, op));
        return Result.new(true, true);
    }

    function int internalApplyOp(int a, int b, char op) {
        if (op = CHAR_ADD) {
            return a + b;
        }
        if (op = CHAR_SUB) {
            return a - b;
        }
        if (op = CHAR_MUL) {
            return a * b;
        }
        if (op = CHAR_DIV) {
            return a / b;
        }
        do Sys.error(2300);
        return 0;
    }

    function void internalBuildNumber(Stack vals, String numberBuilder) {
        if (numberBuilder.length() > 0) {
            do vals.push(numberBuilder.intValue());
            // cringy clear, but this fucking string sucks no cap
            while (numberBuilder.length() > 0) {
                do numberBuilder.eraseLastChar();
            }
        }
        return;
    }

    function void internalHandleDigit(String numberBuilder, char c) {
        do numberBuilder.appendChar(c);
        return;
    }

    function void internalHandleLeftPar(Stack ops, char c) {
        do ops.push(CHAR_LEFT_PAR);
        return;
    }

    function Result internalHandleRightPar(Stack ops, Stack vals) {
        var boolean loop;
        var Result result;

        let loop = true;
        while(loop) {
            if (ops.isEmpty()) {
                return Result.new("Unopened closing bracket", false);
            }
            else {
                if (charToPurpose[ops.top()] = PURP_LEFT_PAR) {
                    let loop = false;
                }
                else {
                    let result = Eval.internalEval(ops, vals);
                    if (result.isError()) {
                        return result;
                    }
                }
            }
        }

        do ops.pop();
        return Result.new(true, true);
    }

    function Result internalHandleOp(Stack ops, Stack vals, char c) {
        var boolean loop;
        var Result result;

        let loop = true;
        while(loop) {
            if (ops.isEmpty()) {
                let loop = false;
            }
            else {
                if (charToPriority[ops.top()] < charToPriority[c]) {
                    let loop = false;
                }
                else {
                    let result = Eval.internalEval(ops, vals);
                    if (result.isError()) {
                        return result;
                    }
                }
            }
        }

        do ops.push(c);
        return Result.new(true, true);
    }
}