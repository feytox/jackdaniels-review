# Ревью от Равиля Рахимзянова 

## Общая оценка (Max - 5, Min - 0)
- Функциональность: 5 (не учитывая minValue, maxValue)
- Архитектура кода: 3.5
- Удобство использования: 5
- Обработка ошибок: 
- Общее впечатление: 4

## Структура проекта
- **Main.jack**: 
- **Calculator.jack**: 
- **Eval.jack**: 
- **Printer.jack**: 
- **Result.jack**: 
- **Stack.jack**: 
Удобно что код поделен на разные классы, а не написан в 1 файле (+)

### Calculator.jack
- Что в классе хорошо:
  1. Код разделен на функции, что делает его более организованным.
  2. Использование комментариев для пояснения некоторых моментов. 
  3. Реализован ввод с клавиатуры, даже специальные символы.
  4. Добавлен ASCII-арт с изображением калькулятора, что делает интерфейс более понятным.
  5. Используется Result result для вывода, как я понял чтоыб также обрабатывать ошибки 
- Возможные улучшения:
  1. Переписать summary в список для читаемости и удобства.
  2. Не понятно что значат вот это число: [864](https://github.com/hereexe/jackdaniels-review-/blob/b15c32f7fd9550bfb966ada5a6c035356280b8f7/src/Calculator.jack#L108), [96](https://github.com/hereexe/jackdaniels-review-/blob/b15c32f7fd9550bfb966ada5a6c035356280b8f7/src/Calculator.jack#L117)
  3. В функции [updateResult](https://github.com/hereexe/jackdaniels-review-/blob/b15c32f7fd9550bfb966ada5a6c035356280b8f7/src/Calculator.jack#L96) много повторяющихся вызовов Printer.println. Это можно упростить, например, используя цикл или массив для хранения строк s_summary.
   
### Eval.jack
- Что в классе хорошо:
  1. Есть обратока скобок.
  2. Есть обработка некоректных скобок 
  3. Логика разделена на методы, что удобно для поимания кода.
  4. Корректно реализован алгоритм сортировочной станции
- Возможные улучшения:
  1. В internalEval проверка [if (~(charToPurpose[op] = PURP_OP))](https://github.com/hereexe/jackdaniels-review-/blob/b15c32f7fd9550bfb966ada5a6c035356280b8f7/src/Eval.jack#L208) избыточна, так как op всегда должен быть оператором
  2. Добавить константы ( Pi, e)
  3. Сделать операцию возведения в степень 

### Result.jack
- Что в классе хорошо:
  1. Реализует паттерн "Результат операций" (похож на Rust)
  2. Булево поле [success](https://github.com/hereexe/jackdaniels-review-/blob/b15c32f7fd9550bfb966ada5a6c035356280b8f7/src/Result.jack#L5) явно указывает состояние обекта
  3. Методы isOk() и isError() позволяют легко проверить состояние.
- Возможные улучшения:


### Stack.jack
- Что в коде хорошо:
  1. Поля capacity, size и elements скрыты, что предотвращает их прямое изменение извне.
  2. Операции push и pop работают за O(1), как и должно быть в стеке.
- Возможные улучшения:
  1. Не хватает комментариев, объясняющих, какие исключения могут возникать и какие гарантии дает класс

### Printer.jack
- Что в коде хорошо:
  1. Упрощеный интерфейс
  2. Коректные названия перменых 
- Возможные улучшения:
  1. Методы printsp и dropsp делают почти то же самое, что print/drop + sp. Можно оставить только базовые методы.

## Что еще можно добавить:
- Как-то решить проблему с maxValue и minValue. Возможно сделать так, как в Python.
